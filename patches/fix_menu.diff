From 566effc8a63ddcbdfa898e5821e9503c0e38f594 Mon Sep 17 00:00:00 2001
From: Claudio Cambra <claudio.cambra@gmail.com>
Date: Thu, 5 May 2022 12:10:17 +0200
Subject: [PATCH] Actually reset menu when user accounts are added or removed

Signed-off-by: Claudio Cambra <claudio.cambra@gmail.com>
---
 src/gui/systray.cpp | 77 ++++++++++++++++++++++++++-------------------
 src/gui/systray.h   |  5 ++-
 2 files changed, 48 insertions(+), 34 deletions(-)

diff --git a/src/gui/systray.cpp b/src/gui/systray.cpp
index 195ae3aca31..20923c741ab 100644
--- a/src/gui/systray.cpp
+++ b/src/gui/systray.cpp
@@ -100,35 +100,11 @@ Systray::Systray()
     qmlRegisterType<WheelHandler>("com.nextcloud.desktopclient", 1, 0, "WheelHandler");
 
 #ifndef Q_OS_MAC
-    auto contextMenu = new QMenu();
-    if (AccountManager::instance()->accounts().isEmpty()) {
-        contextMenu->addAction(tr("Add account"), this, &Systray::openAccountWizard);
-    } else {
-        contextMenu->addAction(tr("Open main dialog"), this, &Systray::openMainDialog);
-    }
-
-    auto pauseAction = contextMenu->addAction(tr("Pause sync"), this, &Systray::slotPauseAllFolders);
-    auto resumeAction = contextMenu->addAction(tr("Resume sync"), this, &Systray::slotUnpauseAllFolders);
-    contextMenu->addAction(tr("Settings"), this, &Systray::openSettings);
-    contextMenu->addAction(tr("Help"), this, &Systray::openHelp);
-    contextMenu->addAction(tr("Exit %1").arg(Theme::instance()->appNameGUI()), this, &Systray::shutdown);
-    setContextMenu(contextMenu);
-
-    connect(contextMenu, &QMenu::aboutToShow, [=] {
-        const auto folders = FolderMan::instance()->map();
-
-        const auto allPaused = std::all_of(std::cbegin(folders), std::cend(folders), [](Folder *f) { return f->syncPaused(); });
-        const auto pauseText = folders.size() > 1 ? tr("Pause sync for all") : tr("Pause sync");
-        pauseAction->setText(pauseText);
-        pauseAction->setVisible(!allPaused);
-        pauseAction->setEnabled(!allPaused);
-
-        const auto anyPaused = std::any_of(std::cbegin(folders), std::cend(folders), [](Folder *f) { return f->syncPaused(); });
-        const auto resumeText = folders.size() > 1 ? tr("Resume sync for all") : tr("Resume sync");
-        resumeAction->setText(resumeText);
-        resumeAction->setVisible(anyPaused);
-        resumeAction->setEnabled(anyPaused);
-    });
+    connect(AccountManager::instance(), &AccountManager::accountAdded,
+        this, &Systray::setupContextMenu);
+    connect(AccountManager::instance(), &AccountManager::accountRemoved,
+        this, &Systray::setupContextMenu);
+    setupContextMenu();
 #endif
 
     connect(UserModel::instance(), &UserModel::newUserSelected,
@@ -160,6 +136,41 @@ void Systray::create()
     }
 }
 
+void Systray::setupContextMenu()
+{
+    _contextMenu.clear();
+    _contextMenu = new QMenu();
+
+    if (AccountManager::instance()->accounts().isEmpty()) {
+        _contextMenu->addAction(tr("Add account"), this, &Systray::openAccountWizard);
+    } else {
+        _contextMenu->addAction(tr("Open main dialog"), this, &Systray::openMainDialog);
+    }
+
+    auto pauseAction = _contextMenu->addAction(tr("Pause sync"), this, &Systray::slotPauseAllFolders);
+    auto resumeAction = _contextMenu->addAction(tr("Resume sync"), this, &Systray::slotUnpauseAllFolders);
+    _contextMenu->addAction(tr("Settings"), this, &Systray::openSettings);
+    _contextMenu->addAction(tr("Help"), this, &Systray::openHelp);
+    _contextMenu->addAction(tr("Exit %1").arg(Theme::instance()->appNameGUI()), this, &Systray::shutdown);
+    setContextMenu(_contextMenu);
+
+    connect(_contextMenu, &QMenu::aboutToShow, [=] {
+        const auto folders = FolderMan::instance()->map();
+
+        const auto allPaused = std::all_of(std::cbegin(folders), std::cend(folders), [](Folder *f) { return f->syncPaused(); });
+        const auto pauseText = folders.size() > 1 ? tr("Pause sync for all") : tr("Pause sync");
+        pauseAction->setText(pauseText);
+        pauseAction->setVisible(!allPaused);
+        pauseAction->setEnabled(!allPaused);
+
+        const auto anyPaused = std::any_of(std::cbegin(folders), std::cend(folders), [](Folder *f) { return f->syncPaused(); });
+        const auto resumeText = folders.size() > 1 ? tr("Resume sync for all") : tr("Resume sync");
+        resumeAction->setText(resumeText);
+        resumeAction->setVisible(anyPaused);
+        resumeAction->setEnabled(anyPaused);
+    });
+}
+
 void Systray::createCallDialog(const Activity &callNotification)
 {
     qCDebug(lcSystray) << "Starting a new call dialog for notification with id: " << callNotification._id << "with text: " << callNotification._subject;
@@ -337,7 +348,7 @@ void Systray::forceWindowInit(QQuickWindow *window) const
     // this shouldn't flicker
     window->show();
     window->hide();
-    
+
 #ifdef Q_OS_MAC
     // On macOS we need to designate the tray window as visible on all spaces and
     // at the menu bar level, otherwise showing it can cause the current spaces to
@@ -515,7 +526,7 @@ QPoint Systray::computeNotificationReferencePoint(int spacing, NotificationPosit
     auto taskbarScreenEdge = taskbarOrientation();
     auto taskbarRect = taskbarGeometry();
     const auto screenRect = currentScreenRect();
-    
+
     if(position == NotificationPosition::TopLeft) {
         taskbarScreenEdge = TaskBarPosition::Top;
         trayIconCenter = QPoint(0, 0);
@@ -624,7 +635,7 @@ QPoint Systray::computeNotificationPosition(int width, int height, int spacing,
     auto trayIconCenter = calcTrayIconCenter();
     auto taskbarScreenEdge = taskbarOrientation();
     const auto screenRect = currentScreenRect();
-        
+
     if(position == NotificationPosition::TopLeft) {
         taskbarScreenEdge = TaskBarPosition::Top;
         trayIconCenter = QPoint(0, 0);
@@ -638,7 +649,7 @@ QPoint Systray::computeNotificationPosition(int width, int height, int spacing,
         taskbarScreenEdge = TaskBarPosition::Bottom;
         trayIconCenter = QPoint(screenRect.width(), screenRect.height());
     }
-        
+
     const auto topLeft = [=]() {
         switch(taskbarScreenEdge) {
         case TaskBarPosition::Bottom:
diff --git a/src/gui/systray.h b/src/gui/systray.h
index 85978467a50..e97189500a0 100644
--- a/src/gui/systray.h
+++ b/src/gui/systray.h
@@ -94,7 +94,7 @@ class Systray
     void shutdown();
 
     void hideWindow();
-    void showWindow();
+    void showWindow(); // Listened to by the QML Window component
     void openShareDialog(const QString &sharePath, const QString &localPath);
     void showFileActivityDialog(const QString &objectName, const int objectId);
     void sendChatMessage(const QString &token, const QString &message, const QString &replyTo);
@@ -113,6 +113,8 @@ private slots:
     static Systray *_instance;
     Systray();
 
+    void setupContextMenu();
+
     QScreen *currentScreen() const;
     QRect currentScreenRect() const;
     QPoint computeWindowReferencePoint() const;
@@ -127,6 +129,7 @@ private slots:
     bool _isOpen = false;
     bool _syncIsPaused = true;
     QPointer<QQmlApplicationEngine> _trayEngine;
+    QPointer<QMenu> _contextMenu;
 
     AccessManagerFactory _accessManagerFactory;
 
